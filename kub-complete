#!/usr/bin/bash


CACHE_TIME=5

SCRIPT_HOME=$HOME/.kub-complete

# make a directory for cached values
[ -d ~/.kub-complete/cache ] || mkdir ~/.kub-complete/cache

kub(){
    local kubeconfig=""
    local inject_kubeconfig=0

    if [[ ! "$*" =~ --kubeconfig ]]; then  # don't append kubeconfig if one specified
        if [ -e "kubeconfig" ]; then
            kubeconfig="--kubeconfig=kubeconfig"
        else
            if [ -e "$HOME/.kube/config" ]; then
                kubeconfig="--kubeconfig=$HOME/.kube/config"
            fi
        fi
        /usr/bin/env kubectl "$kubeconfig" "$@"
    else
        /usr/bin/env kubectl "$@"
    fi
}

_build_command(){
    local tokens=( $COMP_LINE )

    KUBECMD=${tokens[0]}

    for i in "${!tokens[@]}"; do
        word=${tokens[$i]}
        case "$word" in
            --kubeconfig=*|--namespace=*|--user=*)
                [[ "$word" =~ "--kubeconfig=~/" ]] && word=${word/=~/=$HOME/}
                KUBECMD="${KUBECMD} $word";;
            --kubeconfig |--namespace |--user )
                token=${tokens[$((i+1))]}
                [ "$token" == "#~/*" ] && token=${token/#~/$HOME/}
                KUBECMD="${KUBECMD} $word $token"
        esac
    done
}

_set_kub_sub_commands(){

    local kub_help=$(kubectl --help)
    local in_commands=0
    KUB_SUB_COMMANDS=""
    while read -r line; do
        if [[ $line =~ "Available Commands:" ]]; then
            in_commands=1
        else if [[ $line = "" ]] && [[ $in_commands != 0 ]]; then
                 break
             else if [[ $in_commands != 0 ]]; then
                      first_word=(${line// / })
                      KUB_SUB_COMMANDS="${first_word} ${KUB_SUB_COMMANDS}"
                  fi
             fi
        fi
    done <<< "$kub_help"

}

_kub_cache_fetch(){
    CACHE=""
    output=$(find $SCRIPT_HOME/cache/$1 -mtime -${CACHE_TIME}s 2>/dev/null)
    if [ $? == 1 ] || [ "$output" == "" ]; then
        CACHE=$(eval ${KUBECMD} get $1)
        CACHE=$(awk 'NR>1{print $1}' <<< "$CACHE" )
        echo $CACHE > $SCRIPT_HOME/cache/$1
    else
        CACHE=$(<$SCRIPT_HOME/cache/$1)
    fi
}

_kubectl_complete()
{
  local cmd="${1##*/}"
  local line=${COMP_LINE}
  local prev=${COMP_WORDS[COMP_CWORD-1]}
  local cur=${COMP_WORDS[COMP_CWORD]}

  known_words="get|describe|exec|logs*|--n*|ns|nodes*|pods*|pvc*|rc|replicationcontrollers*|rollingupdate|rolling-update|services*"

  last_recognized=""

  for word in $line; do
      if [[ $word =~ $known_words ]]; then
          last_recognized=$word
      fi
  done

  _build_command

  COMPREPLY=()
  case "$last_recognized" in
      --namespace|namespace|ns)
          _kub_cache_fetch namespaces ;;

      --n*)
          CACHE="--namespace" ;;

      logs|exec|pod|pods)
          _kub_cache_fetch pods  ;;

      pv)
          _kub_cache_fetch pv ;;

      pvc)
          _kub_cache_fetch pvc ;;

      replicationcontrollers|replicationcontroller|rc|rollingupdate|rolling-update)
          _kub_cache_fetch rc  ;;

      service|services)
          _kub_cache_fetch services ;;

      node|nodes)
          _kub_cache_fetch nodes ;;

      get|describe)
          CACHE="namespaces nodes pvcs pvs pods rc secrets services" ;;

      g*)
          CACHE="get" ;;

      d*)
          CACHE="describe" ;;

      *)
          CACHE=$KUB_SUB_COMMANDS
  esac

  if [ $? = 0 ]; then
      COMPREPLY=( $( compgen -W "$CACHE" -- $cur) )
  fi


  return 0
}

complete -o default -F _kubectl_complete -o filenames kub
